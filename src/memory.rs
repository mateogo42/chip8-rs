#[derive(Debug)]
pub struct Memory {
    pub data: [u8; 4096],
}

const SPRITES: [u8; 16 * 5] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

impl Memory {
    pub fn new() -> Self {
        let mut data = [0; 4096];
        data[0..16 * 5].copy_from_slice(&SPRITES);
        Self { data }
    }

    pub fn get(&self, index: usize) -> u8 {
        self.data[index]
    }

    pub fn set(&mut self, index: usize, value: u8) {
        self.data[index] = value
    }

    pub fn load(&mut self, data: &[u8]) {
        let len = data.len();
        self.data[0x200..0x200 + len].copy_from_slice(data);
    }
}
